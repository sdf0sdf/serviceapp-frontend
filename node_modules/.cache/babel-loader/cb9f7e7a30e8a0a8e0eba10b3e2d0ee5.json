{"remainingRequest":"/home/shepeleva-ls/vue/vue-crash-2021/node_modules/babel-loader/lib/index.js!/home/shepeleva-ls/vue/vue-crash-2021/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/shepeleva-ls/vue/vue-crash-2021/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/shepeleva-ls/vue/vue-crash-2021/src/views/People.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/shepeleva-ls/vue/vue-crash-2021/src/views/People.vue","mtime":1619984858880},{"path":"/home/shepeleva-ls/vue/vue-crash-2021/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/shepeleva-ls/vue/vue-crash-2021/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/shepeleva-ls/vue/vue-crash-2021/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/shepeleva-ls/vue/vue-crash-2021/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvaG9tZS9zaGVwZWxldmEtbHMvdnVlL3Z1ZS1jcmFzaC0yMDIxL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICIvaG9tZS9zaGVwZWxldmEtbHMvdnVlL3Z1ZS1jcmFzaC0yMDIxL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0IFBlb3BsZSBmcm9tICcuLi9jb21wb25lbnRzL1Blb3BsZSc7CmltcG9ydCBBZGRQZXJzb24gZnJvbSAnLi4vY29tcG9uZW50cy9BZGRQZXJzb24nOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ1Blb3BsZScsCiAgcHJvcHM6IHsKICAgIHNob3dBZGRQZXJzb246IEJvb2xlYW4KICB9LAogIGNvbXBvbmVudHM6IHsKICAgIFBlb3BsZTogUGVvcGxlLAogICAgQWRkUGVyc29uOiBBZGRQZXJzb24KICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBwZW9wbGU6IFtdCiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgYWRkUGVyc29uOiBmdW5jdGlvbiBhZGRQZXJzb24ocGVyc29uKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciByZXMsIGRhdGE7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2goJ2FwaS9wZW9wbGUnLCB7CiAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJwogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwZXJzb24pCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIGRhdGEgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgX3RoaXMucGVvcGxlID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShfdGhpcy5wZW9wbGUpLCBbZGF0YV0pOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgZGVsZXRlUGVyc29uOiBmdW5jdGlvbiBkZWxldGVQZXJzb24oaWQpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICB2YXIgcmVzOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAoIWNvbmZpcm0oJ0FyZSB5b3Ugc3VyZT8nKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDU7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaCgiYXBpL3Blb3BsZS8iLmNvbmNhdChpZCksIHsKICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnREVMRVRFJwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgcmVzLnN0YXR1cyA9PT0gMjAwID8gX3RoaXMyLnBlb3BsZSA9IF90aGlzMi5wZW9wbGUuZmlsdGVyKGZ1bmN0aW9uIChwZXJzb24pIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHBlcnNvbi5pZCAhPT0gaWQ7CiAgICAgICAgICAgICAgICB9KSA6IGFsZXJ0KCdFcnJvciBkZWxldGluZyBwZXJzb24nKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8gISEhIHVwZGF0ZVBlcnNvbiAoaWQpCiAgICAvLyBhc3luYyB0b2dnbGVSZW1pbmRlcihpZCkgewogICAgLy8gICBjb25zdCB0YXNrVG9Ub2dnbGUgPSBhd2FpdCB0aGlzLmZldGNoVGFzayhpZCkKICAgIC8vICAgY29uc3QgdXBkVGFzayA9IHsgLi4udGFza1RvVG9nZ2xlLCByZW1pbmRlcjogIXRhc2tUb1RvZ2dsZS5yZW1pbmRlciB9CiAgICAvLyAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGBhcGkvdGFza3MvJHtpZH1gLCB7CiAgICAvLyAgICAgbWV0aG9kOiAnUFVUJywKICAgIC8vICAgICBoZWFkZXJzOiB7CiAgICAvLyAgICAgICAnQ29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgLy8gICAgIH0sCiAgICAvLyAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkodXBkVGFzayksCiAgICAvLyAgIH0pCiAgICAvLyAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpCiAgICAvLyAgIHRoaXMudGFza3MgPSB0aGlzLnRhc2tzLm1hcCgodGFzaykgPT4KICAgIC8vICAgICB0YXNrLmlkID09PSBpZCA/IHsgLi4udGFzaywgcmVtaW5kZXI6IGRhdGEucmVtaW5kZXIgfSA6IHRhc2sKICAgIC8vICAgKQogICAgLy8gfSwKICAgIGZldGNoUGVvcGxlOiBmdW5jdGlvbiBmZXRjaFBlb3BsZSgpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7CiAgICAgICAgdmFyIHJlcywgZGF0YTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKCdhcGkvcGVvcGxlJyk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0My5zZW50OwogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIGRhdGEgPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCBkYXRhKTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgZmV0Y2hQZXJzb246IGZ1bmN0aW9uIGZldGNoUGVyc29uKGlkKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KCkgewogICAgICAgIHZhciByZXMsIGRhdGE7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaCgiYXBpL3Blb3BsZS8iLmNvbmNhdChpZCkpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICByZXMgPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBkYXRhID0gX2NvbnRleHQ0LnNlbnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIiwgZGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNCk7CiAgICAgIH0pKSgpOwogICAgfQogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU1KCkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUkKF9jb250ZXh0NSkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NS5wcmV2ID0gX2NvbnRleHQ1Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXMzLmZldGNoUGVvcGxlKCk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgX3RoaXMzLnBlb3BsZSA9IF9jb250ZXh0NS5zZW50OwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTUpOwogICAgfSkpKCk7CiAgfQp9Ow=="},{"version":3,"sources":["/home/shepeleva-ls/vue/vue-crash-2021/src/views/People.vue"],"names":[],"mappings":";;;;;;AASA,OAAO,MAAP,MAAmB,sBAAnB;AACA,OAAO,SAAP,MAAsB,yBAAtB;AACA,eAAe;AACb,EAAA,IAAI,EAAE,QADO;AAEb,EAAA,KAAK,EAAE;AACL,IAAA,aAAa,EAAE;AADV,GAFM;AAKb,EAAA,UAAU,EAAE;AACV,IAAA,MAAM,EAAN,MADU;AAEV,IAAA,SAAS,EAAT;AAFU,GALC;AASb,EAAA,IATa,kBASN;AACL,WAAO;AACL,MAAA,MAAM,EAAE;AADH,KAAP;AAGD,GAbY;AAcb,EAAA,OAAO,EAAE;AACD,IAAA,SADC,qBACS,MADT,EACiB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACJ,KAAK,CAAC,YAAD,EAAe;AACpC,kBAAA,MAAM,EAAE,MAD4B;AAEpC,kBAAA,OAAO,EAAE;AACP,oCAAgB;AADT,mBAF2B;AAKpC,kBAAA,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe,MAAf;AAL8B,iBAAf,CADD;;AAAA;AAChB,gBAAA,GADgB;AAAA;AAAA,uBASH,GAAG,CAAC,IAAJ,EATG;;AAAA;AAShB,gBAAA,IATgB;AAWtB,gBAAA,KAAI,CAAC,MAAL,gCAAkB,KAAI,CAAC,MAAvB,IAA+B,IAA/B;;AAXsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYvB,KAbM;AAcD,IAAA,YAdC,wBAcY,EAdZ,EAcgB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACjB,OAAO,CAAC,eAAD,CADU;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAED,KAAK,sBAAe,EAAf,GAAqB;AAC1C,kBAAA,MAAM,EAAE;AADkC,iBAArB,CAFJ;;AAAA;AAEb,gBAAA,GAFa;AAMnB,gBAAA,GAAG,CAAC,MAAJ,KAAe,GAAf,GACK,MAAI,CAAC,MAAL,GAAc,MAAI,CAAC,MAAL,CAAY,MAAZ,CAAmB,UAAC,MAAD;AAAA,yBAAY,MAAM,CAAC,EAAP,KAAc,EAA1B;AAAA,iBAAnB,CADnB,GAEI,KAAK,CAAC,uBAAD,CAFT;;AANmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUtB,KAxBM;AAyBP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACM,IAAA,WA5CC,yBA4Ca;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACA,KAAK,CAAC,YAAD,CADL;;AAAA;AACZ,gBAAA,GADY;AAAA;AAAA,uBAGC,GAAG,CAAC,IAAJ,EAHD;;AAAA;AAGZ,gBAAA,IAHY;AAAA,kDAKX,IALW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMnB,KAlDM;AAmDD,IAAA,WAnDC,uBAmDW,EAnDX,EAmDe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACF,KAAK,sBAAe,EAAf,EADH;;AAAA;AACd,gBAAA,GADc;AAAA;AAAA,uBAGD,GAAG,CAAC,IAAJ,EAHC;;AAAA;AAGd,gBAAA,IAHc;AAAA,kDAKb,IALa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMrB;AAzDM,GAdI;AAyEP,EAAA,OAzEO,qBAyEG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACM,MAAI,CAAC,WAAL,EADN;;AAAA;AACd,cAAA,MAAI,CAAC,MADS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEf;AA3EY,CAAf","sourcesContent":["<template>\n  <AddPerson v-show=\"showAddPerson\" @add-person=\"addPerson\" />\n  <People\n    @delete-person=\"deletePerson\"\n    :people=\"people\"\n  />\n</template>\n\n<script>\nimport People from '../components/People'\nimport AddPerson from '../components/AddPerson'\nexport default {\n  name: 'People',\n  props: {\n    showAddPerson: Boolean,\n  },\n  components: {\n    People,\n    AddPerson,\n  },\n  data() {\n    return {\n      people: [],\n    }\n  },\n  methods: {\n    async addPerson(person) {\n      const res = await fetch('api/people', {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json',\n        },\n        body: JSON.stringify(person),\n      })\n\n      const data = await res.json()\n\n      this.people = [...this.people, data]\n    },\n    async deletePerson(id) {\n      if (confirm('Are you sure?')) {\n        const res = await fetch(`api/people/${id}`, {\n          method: 'DELETE',\n        })\n\n        res.status === 200\n          ? (this.people = this.people.filter((person) => person.id !== id))\n          : alert('Error deleting person')\n      }\n    },\n    // !!! updatePerson (id)\n    // async toggleReminder(id) {\n    //   const taskToToggle = await this.fetchTask(id)\n    //   const updTask = { ...taskToToggle, reminder: !taskToToggle.reminder }\n\n    //   const res = await fetch(`api/tasks/${id}`, {\n    //     method: 'PUT',\n    //     headers: {\n    //       'Content-type': 'application/json',\n    //     },\n    //     body: JSON.stringify(updTask),\n    //   })\n\n    //   const data = await res.json()\n\n    //   this.tasks = this.tasks.map((task) =>\n    //     task.id === id ? { ...task, reminder: data.reminder } : task\n    //   )\n    // },\n    async fetchPeople() {\n      const res = await fetch('api/people')\n\n      const data = await res.json()\n\n      return data\n    },\n    async fetchPerson(id) {\n      const res = await fetch(`api/people/${id}`)\n\n      const data = await res.json()\n\n      return data\n    },\n  },\n  async created() {\n    this.people = await this.fetchPeople()\n  },\n}\n</script>"],"sourceRoot":""}]}